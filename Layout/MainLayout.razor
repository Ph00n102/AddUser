@using System.Security.Claims
@using HosxpUi.Layout.Providers
@using HosxpUi.Services
@inherits LayoutComponentBase
@inject StateContainer StateContainer
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inject AuthenticationStateProvider CustomAuthProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authStateProvider;
@inject ILocalStorageService _localStorageService;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Color="Color.Primary">
        <AuthorizeView>
            <Authorized>
                <MudText Color="Color.Inherit" Class="mr-2">
                    ยินดีต้อนรับ
                </MudText>
                <MudSpacer/>
                <MudLink Color="Color.Inherit" Underline="Underline.None" class="mr-2" OnClick="LogoutAsync">Logout</MudLink>
            </Authorized>
            <NotAuthorized>
                <MudLink Color="Color.Inherit" Underline="Underline.None" Class="mr-2" Href="/">สำนักงานดิจิทัลทางการแพทย์</MudLink>
                <MudSpacer/>
                <MudLink Color="Color.Inherit" Underline="Underline.None" Class="mr-2" Href="/login">Login</MudLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code{
    private bool drawerOpen = true; // You can control the drawer open/close state here
    private string LoginName { get; set; }
    private string Role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract the LoginName and Role from the user's claims
        LoginName = user?.FindFirst(c => c.Type == "LoginName")?.Value;
        Role = user?.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        // Set the value in the state container
        StateContainer.LoginName = LoginName;
        StateContainer.Role = Role;
    }
     private async Task LogoutAsync()
    {
        // Clear the JWT token from local storage
        await _localStorageService.RemoveItemAsync("jwt-access-token");

        // Notify the authentication state provider to update the auth state
        if (_authStateProvider is CustomAuthProvider customAuthProvider)
        {
            customAuthProvider.NotifyAuthState();
        }

        // Redirect the user to the login page or home page
        NavigationManager.NavigateTo("/login");
    }

}
