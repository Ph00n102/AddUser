@page "/addvs"
@inject HttpClient _http
@using Blazored.LocalStorage
@using HosxpUi.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager navManager
@inject ILocalStorageService _localStorageService;
@inject AuthenticationStateProvider _authStateProvider;
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="IpdVsVitalSign" OnValidSubmit="HandleSubmit">
 <DataAnnotationsValidator />
    <ValidationSummary />

    <p>สำหรับทดสอบเพิ่มข้อมูลใน HN 0000057 AN 650041124</p>
    @* <div>
        <label for="bt">HN:</label>
        <input class="form-control" @bind="IpdVsVitalSign.hn" type="text" placeholder="bt"/>
    </div> *@

    <div>
        <label for="bt">BT:</label>
        <input class="form-control" @bind="IpdVsVitalSign.bt" type="text" placeholder="bt"/>
    </div>

    <div>
        <label for="pr">PR:</label>
        <input class="form-control" @bind="IpdVsVitalSign.pr" type="text" placeholder="pr"/>
    </div>

    <div>
        <label for="sbp">SBP:</label>
        <input class="form-control" @bind="IpdVsVitalSign.sbp" type="text" placeholder="sbp"/>
    </div>

    <div>
        <label for="dbp">DBP:</label>
        <input class="form-control" @bind="IpdVsVitalSign.dbp" type="text" placeholder="dbp"/>
    </div>

    <div>
        <label for="map">MAP:</label>
        <input class="form-control" @bind="IpdVsVitalSign.map" type="text" placeholder="map"/>
    </div>

    <div>
        <label for="sat">SAT:</label>
        <input class="form-control" @bind="IpdVsVitalSign.sat" type="text" placeholder="sat"/>
    </div>

    @* <button type="submit">Submit</button> *@
    <button class="btn btn-primary"type="submit">Add IpdVsVitalSign</button>
</EditForm>

<h3>Enter HN to Fetch Patient Data</h3>

<input class="form-control" @bind="hn" @bind:event="oninput" placeholder="Enter HN" />
<button class="btn btn-primary" @onclick="FetchPatientData">Search</button>

@if (patient != null)
{
    
    <p>AN: <input class="form-control" @bind="patient.an" disabled /></p>
    <p>Name: <input class="form-control" @bind="fullName" disabled /></p>
    <p>Age: <input class="form-control" @bind="patient.ageY" disabled /></p>
    <p>Ward: <input class="form-control" @bind="patient.wardName" disabled /></p>
}
else
{
    <p>AN: <input class="form-control" disabled /></p>
    <p>Name: <input class="form-control" disabled /></p>
    <p>Age: <input class="form-control" disabled /></p>
    <p>Ward: <input class="form-control" disabled /></p>
}



@code {
  
    private IpdVsVitalSign IpdVsVitalSign { get; set; } = new();
    private string responseMessage;

    private string _hn = "";
    @* private string hn
    {
        get => _hn;
        set
        {
            _hn = value;
            if (!string.IsNullOrWhiteSpace(_hn))
            {
                 Console.WriteLine($"hn changed: {_hn}"); // Log the updated value
                _ = FetchPatientData(); // Auto-fetch patient data when HN changes
            }
            else
            {
                patient = null;
                fullName = "";
            }
        }
    } *@
    private string hn
    {
        get => _hn;
        set
        {
            if (_hn != value) // Only fetch if HN actually changes
            {
                _hn = value;
                if (!string.IsNullOrWhiteSpace(_hn))
                {
                    Console.WriteLine($"hn changed: {_hn}"); // Log the updated value
                    _ = FetchPatientData(); // Auto-fetch patient data when HN changes
                }
                else
                {
                    ClearPatientData();
                }
            }
        }
    }
    private Patient? patient;
    private string fullName = "";
    private CancellationTokenSource? cts;


    // Handle form submit
     private async Task HandleSubmit()
    {
            var httpClient = _httpClientFactory.CreateClient("BackEnd");
            // ส่งข้อมูลไปที่ API ผ่าน POST
            @* var response = await httpClient.PostAsJsonAsync($"http://localhost:5212/"); *@
            var response = await httpClient.PostAsJsonAsync($"api/IpdVs/AddIpdVsVitalSign", IpdVsVitalSign);
            @* http://localhost:5212/api/Kphis/AddIpdVsVitalSign/IpdVsVitalSign *@
                if (response.IsSuccessStatusCode)
                {
                    navManager.NavigateTo("/");
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode} - Something went wrong!");
                }
        
    }

     private async Task OnHnChanged(ChangeEventArgs e)
    {
        hn = e.Value?.ToString() ?? "";
        if (!string.IsNullOrWhiteSpace(hn))
        {
            await FetchPatientData();
        }
        else
        {
            patient = null;
            fullName = "";
        }
    }

    private async Task FetchPatientData()
    {
        if (string.IsNullOrWhiteSpace(hn)) return;

         // Trim and remove unnecessary characters to avoid formatting issues
        _hn = hn.Trim();

        // Cancel previous request if still running
        cts?.Cancel();
        cts = new CancellationTokenSource();

        try
        {
            var httpClient = _httpClientFactory.CreateClient("BackEnd");
            patient = await httpClient.GetFromJsonAsync<Patient>($"api/Hos/getpatientanward?_hn={_hn}");

            if (patient != null)
            {
                fullName = $"{patient.pname}{patient.fname} {patient.lname}";
            }
            else
            {
                // If HN is incorrect or not found, clear all bound fields
                ClearPatientData();
            }

            StateHasChanged(); // Force UI to refresh
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching patient data: {ex.Message}");
            ClearPatientData();
        }
    }

    // Method to clear all patient-related bindings
    private void ClearPatientData()
    {
        patient = null;
        fullName = "";
        IpdVsVitalSign = new(); // Reset the form model to clear input fields
    }

    public class Patient
    {
        public string hn { get; set; } = "";
        public string an { get; set; } = "";
        public string pname { get; set; } = "";
        public string fname { get; set; } = "";
        public string lname { get; set; } = "";
        public int ageY { get; set; }
        public string wardName { get; set; } = "";
    } 
}

