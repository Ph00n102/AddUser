@page "/absentvisit"
@using HosxpUi.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text
@using Blazored.LocalStorage
@inject HttpClient _http 
@inject IJSRuntime JS
@inject NavigationManager navManager
@inject ILocalStorageService _localStorageService;
@attribute [Authorize(Roles = "Admin, Card")]

<PageTitle>รายการเปิด Visit ที่คนไข้ไม่ได้มา</PageTitle>
@if (visitData == null)
{
    <p><em>Loading..</em></p>
}
else 
{
    <table class="table">
    <thead>
        <tr>
            <td>Hn</td>
            <td>Vn</td>
            <td>ชื่อคนไข้</td>
            <td>วันที่มา</td>
            <td>เวลาที่มา</td>
            <th><input type="checkbox" onclick="checkUncheck(this)" /> เลือกทั้งหมด</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in visitData)
        {
        <tr>
            <td>@item.hn</td>
            <td>@item.vn</td>
            <td>@item.patientName</td>
            <td>@item.vstDate</td>
            <td>@item.vsttime</td>
            <td>
                <button @onclick="() => ConfirmDeleteVisit(item.hosGuid)" type="submit" class="btn btn-danger btn-sm">ลบ</button>
                @* <input type="checkbox" @onchange="(e) => UpdateSelectedIds(item.hosGuid, e.Value)" /> *@
                <input type="checkbox" @onchange="(e) => UpdateSelectedIds(item.hosGuid, e.Value)" checked="@selectedIds.Contains(item.hosGuid)" />
            </td>
        </tr>
        }
    </tbody>
    <button @onclick="DeleteSelectedOvsts" class="btn btn-danger btn-sm">ลบหลาย record</button>
</table>
}

@code {
    public List<AbsentVisit> visitData = new();
    private List<string> selectedIds = new List<string>();
    protected override async Task OnInitializedAsync()
    {
            try
            {
                // Fetch data from the API
                //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
                visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");

                // Debugging output
                if (visitData == null)
                {
                    Console.WriteLine("API returned null data.");
                }
    
                else
                {
                    
                    Console.WriteLine($"Fetched {visitData.Count} video games.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data: {ex.Message}");
            }
            StateHasChanged();
    }

    private async Task ConfirmDeleteVisit(string id)
    {
        // ใช้ JavaScript Confirm dialog เพื่อถามผู้ใช้ว่าแน่ใจหรือไม่ที่จะลบ
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "คุณแน่ใจหรือไม่ว่าต้องการลบ Visit คนไขนี้ใช่ไหม?");

        if (isConfirmed)
        {
            // ถ้ายืนยันการลบ, ทำการลบสินค้า
            await DeleteAbsentVisit(id); 
           
        }
    }

    private async Task DeleteAbsentVisit(string id)
    {
        try
        {
            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            _http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

            if (response.IsSuccessStatusCode)
            {
                //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
                visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
                StateHasChanged();
                
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - ลบสินค้าไม่สำเร็จ!");
            }
        }
        catch (Exception ex)
        {
            // จัดการข้อผิดพลาดหากมีปัญหาในการทำคำขอ
            Console.WriteLine($"เกิดข้อผิดพลาด: {ex.Message}");
        }
    }

    private async Task DeleteAbsentVisit2(List<string> ids)
    {
        try
        {
            if (ids == null || !ids.Any())
            {
                Console.WriteLine("No IDs provided for deletion.");
                return;
            }

            // Retrieve the token from local storage
            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Authorization token is missing.");
                return;
            }

            // Add the token to the authorization header
            _http.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Iterate over the list of IDs and delete each individually
            foreach (var id in ids)
            {
                // Perform a DELETE request for each ID
                var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Successfully deleted record with ID: {id}");
                }
                else
                {
                    Console.WriteLine($"Error deleting record with ID: {id}. Status: {response.StatusCode}");
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error Details: {errorContent}");
                }
            }

            // Refresh the data after deletions
            //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
            visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
            Console.WriteLine("Deleted records successfully.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    private async Task DeleteSelectedOvsts()
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "คุณแน่ใจหรือไม่ว่าต้องการลบ Visit คนไขนี้ใช่ไหม?");

        if (isConfirmed && selectedIds.Any())
        {
            await DeleteAbsentVisit2(selectedIds);

            // Clear selectedIds after deletion
            selectedIds.Clear();
            @* navManager.NavigateTo("/absentvisit"); *@
            // Refresh the visitData list
            //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
            visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
            StateHasChanged(); // Refresh the UI to clear checkboxes
        }
        else if (!selectedIds.Any())
        {
            Console.WriteLine("No items selected for deletion.");
        }
    }


    private void UpdateSelectedIds(string id, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!selectedIds.Contains(id))
                selectedIds.Add(id);
        }
        else
        {
            selectedIds.Remove(id);
        }
    }
}

    

   

    
