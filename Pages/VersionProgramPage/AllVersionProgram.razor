@page "/allversion"
@using HosxpUi.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]


@if (programs == null)
{
    <p>Loading...</p>
}
else
{
    <p class='text-center'><strong>รายการโปรแกรมที่อัพเดตจนถึงปัจจุบัน</strong></p>
    <table class='table'>
        <thead>
            <tr>
                <th>รายการ</th>
                <th>รายละเอียด</th>
                <th>วันที่</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var program in programs)
            {
                <tr>
                    <td>@program.VersionName</td>
                    @* <td>@program.VersionDetail</td> *@
                    <td>
                        <textarea class="form-control" rows="5" readonly>@program.VersionDetail</textarea>
                    </td>
                    <td>@program.VersionDate</td>
                    <td>
                        <button class="btn btn-warning"><a href="/editprogram/@program.Id">Edit</a></button>
                        <button class="btn btn-danger" @onclick="() => DeleteProgram(program.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    VersionProgram[] programs;
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        // Get Base URL from HttpClient
        var baseUrl = Http.BaseAddress?.ToString() ?? NavigationManager.BaseUri;
        var hubUrl = $"{baseUrl}broadcastHub"; // Append the Hub route
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .Build();

        // Listen to "ReceiveProgram" event to add a new program version
        hubConnection.On<VersionProgram>("ReceiveProgram", program =>
        {
            if (programs != null)
            {
                var programList = programs.ToList();
                programList.Add(program); // Add the new book to the list
                programs = programList.ToArray();
                InvokeAsync(StateHasChanged);
            }
            else
            {
                // Reload the data if books are not yet loaded
                CallLoadData();
            }
        });
        
        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

     private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        programs = await Http.GetFromJsonAsync<VersionProgram[]>("api/VersionProgram/Get");
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    protected async Task DeleteProgram(int id)
    {
        var response = await Http.DeleteAsync($"api/VersionProgram/Delete/{id}");
        
        // Notify other clients
        if (IsConnected) await SendMessage();
        NavigationManager.NavigateTo("/allversion");
    
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");
}
