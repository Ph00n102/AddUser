@page "/absentvisit"
@using HosxpUi.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text
@using Blazored.LocalStorage
@using System.Text.Json
@inject HttpClient _http 
@inject IJSRuntime JS
@inject NavigationManager navManager
@inject ILocalStorageService _localStorageService;
@attribute [Authorize(Roles = "Admin, Card")]

<PageTitle>รายการเปิด Visit ที่คนไข้ไม่ได้มา</PageTitle>
<button @onclick="DeleteSelectedOvsts" class="btn btn-danger btn-sm">ลบหลาย record</button>
@if (visitData == null)
{
    <p><em>Loading..</em></p>
}
else 
{
    <table class="table">
    <thead>
        <tr>
            <td>Hn</td>
            <td>Vn</td>
            <td>ชื่อคนไข้</td>
            <td>วันที่มา</td>
            <td>เวลาที่มา</td>
            <td>สถานะ</td>
            <th><input type="checkbox" onclick="checkUncheck(this)" /> เลือกทั้งหมด</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in visitData)
        {
        <tr>
            <td>@item.hn</td>
            <td>@item.vn</td>
            <td>@item.patientName</td>
            <td>@item.vstDate</td>
            <td>@item.vsttime</td>
            <td>
                <span class="@GetStatusClass(item.StatusMessage)">
                    @item.StatusMessage
                </span>
            </td>
            <td>
                <button @onclick="() => ConfirmDeleteVisit(item.hosGuid)" type="submit" class="btn btn-danger btn-sm">ลบ</button>
                @* <input type="checkbox" @onchange="(e) => UpdateSelectedIds(item.hosGuid, e.Value)" /> *@
                <input type="checkbox" @onchange="(e) => UpdateSelectedIds(item.hosGuid, e.Value)" checked="@selectedIds.Contains(item.hosGuid)" />
            </td>
        </tr>
        }
    </tbody>
</table>
}

@code {
    public List<AbsentVisit> visitData = new();
    private List<string> selectedIds = new List<string>();
    @* protected override async Task OnInitializedAsync()
    {
        try
        {
            visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");

            if (visitData != null)
            {
                foreach (var visit in visitData)
                {
                    visit.StatusMessage = await GetMedRecordStatus(visit.hn, visit.vn);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    } *@
    protected override async Task OnInitializedAsync()
    {
        try
        {
            visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");

            if (visitData != null)
            {
                var tasks = visitData.Select(async visit =>
                {
                    visit.StatusMessage = await GetMedRecordStatus(visit.hn, visit.vn);
                    StateHasChanged(); // Trigger UI update for each item
                });

                await Task.WhenAll(tasks); // Wait for all tasks to complete before continuing
            }

            StateHasChanged(); // Final state update to ensure all statuses are updated
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }



    private async Task ConfirmDeleteVisit(string id)
    {
        // ใช้ JavaScript Confirm dialog เพื่อถามผู้ใช้ว่าแน่ใจหรือไม่ที่จะลบ
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "คุณแน่ใจหรือไม่ว่าต้องการลบ Visit คนไขนี้ใช่ไหม?");

        if (isConfirmed)
        {
            // ถ้ายืนยันการลบ, ทำการลบสินค้า
            await DeleteAbsentVisit(id); 
           
        }
    }

    @* private async Task DeleteAbsentVisit(string id)
    {
        try
        {
            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            _http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

            if (response.IsSuccessStatusCode)
            {
                //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
                visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
                StateHasChanged();
                
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - ลบสินค้าไม่สำเร็จ!");
            }
        }
        catch (Exception ex)
        {
            // จัดการข้อผิดพลาดหากมีปัญหาในการทำคำขอ
            Console.WriteLine($"เกิดข้อผิดพลาด: {ex.Message}");
        }
    } *@
    private async Task DeleteAbsentVisit(string id)
    {
        try
        {
            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            _http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted item from the visitData list
                var deletedVisit = visitData.FirstOrDefault(v => v.hosGuid == id);
                if (deletedVisit != null)
                {
                    visitData.Remove(deletedVisit);
                }

                // Update only the affected elements
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - ลบไม่สำเร็จ!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"เกิดข้อผิดพลาด: {ex.Message}");
        }
    }


    @* private async Task DeleteAbsentVisit2(List<string> ids)
    {
        try
        {
            if (ids == null || !ids.Any())
            {
                Console.WriteLine("No IDs provided for deletion.");
                return;
            }

            // Retrieve the token from local storage
            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Authorization token is missing.");
                return;
            }

            // Add the token to the authorization header
            _http.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Iterate over the list of IDs and delete each individually
            foreach (var id in ids)
            {
                // Perform a DELETE request for each ID
                var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Successfully deleted record with ID: {id}");
                }
                else
                {
                    Console.WriteLine($"Error deleting record with ID: {id}. Status: {response.StatusCode}");
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error Details: {errorContent}");
                }
            }

            // Refresh the data after deletions
            //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
            visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
            Console.WriteLine("Deleted records successfully.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    } *@

    @* private async Task DeleteAbsentVisit2(List<string> ids)
    {
        try
        {
            if (ids == null || !ids.Any())
            {
                Console.WriteLine("No IDs provided for deletion.");
                return;
            }

            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            _http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            foreach (var id in ids)
            {
                var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Successfully deleted record with ID: {id}");

                    // Remove the deleted item from visitData
                    var deletedVisit = visitData.FirstOrDefault(v => v.hosGuid == id);
                    if (deletedVisit != null)
                    {
                        visitData.Remove(deletedVisit);
                    }
                    // Refresh only affected parts
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine($"Error deleting record with ID: {id}. Status: {response.StatusCode}");
                }
            }

            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    } *@

    private async Task DeleteAbsentVisit2(List<string> ids)
    {
        try
        {
            if (ids == null || !ids.Any())
            {
                Console.WriteLine("No IDs provided for deletion.");
                return;
            }

            var token = await _localStorageService.GetItemAsync<string>("jwt-access-token");
            _http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Create a list to store successfully deleted IDs
            List<string> successfullyDeletedIds = new List<string>();

            foreach (var id in ids)
            {
                var response = await _http.DeleteAsync($"/api/MedRecord/DeleteNotComeOvst/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Successfully deleted record with ID: {id}");

                    // Add to the list of deleted IDs
                    successfullyDeletedIds.Add(id);
                }
                else
                {
                    Console.WriteLine($"Error deleting record with ID: {id}. Status: {response.StatusCode}");
                }
            }

            // Remove only the deleted records from visitData
            visitData.RemoveAll(v => successfullyDeletedIds.Contains(v.hosGuid));

            // Refresh only affected parts
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }




    private async Task DeleteSelectedOvsts()
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "คุณแน่ใจหรือไม่ว่าต้องการลบ Visit คนไขนี้ใช่ไหม?");

        if (isConfirmed && selectedIds.Any())
        {
            await DeleteAbsentVisit2(selectedIds);

            // Clear selectedIds after deletion
            selectedIds.Clear();
            @* navManager.NavigateTo("/absentvisit"); *@
            // Refresh the visitData list
            //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecords");
            //visitData = await _http.GetFromJsonAsync<List<AbsentVisit>>("api/MedRecord/GetMedRecordsRedis");
            StateHasChanged(); // Refresh the UI to clear checkboxes
        }
        else if (!selectedIds.Any())
        {
            Console.WriteLine("No items selected for deletion.");
        }
    }


    private void UpdateSelectedIds(string id, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!selectedIds.Contains(id))
                selectedIds.Add(id);
        }
        else
        {
            selectedIds.Remove(id);
        }
    }

    private async Task<string> GetMedRecordStatus(string hn, string vn)
    {
        try
        {
            var response = await _http.GetFromJsonAsync<JsonElement>($"api/MedRecord/CheckMedRecord?hn={hn}&vn={vn}");

            if (response.TryGetProperty("message", out JsonElement message))
            {
                return message.GetString() ?? "Unknown";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching status for HN: {hn}, VN: {vn} - {ex.Message}");
        }
        return "Error";
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "พบข้อมูล" => "text-success fw-bold", // Green for found
            "ไม่พบข้อมูล" => "text-danger fw-bold", // Red for not found
            _ => "text-warning fw-bold" // Yellow for unknown or errors
        };
    }


}

    

   

    
