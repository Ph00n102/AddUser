@page "/loginwithoutotp"
@using System.Text.Json;
@using System.Text;
@using System.Net;
@using Blazored.LocalStorage
@using HosxpUi.Layout.Providers
@using HosxpUi.ViewModels.Accounts
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject IHttpClientFactory _httpClientFactory;
@inject HttpClient _http 
@inject ILocalStorageService _localStorageService;
@inject AuthenticationStateProvider _authStateProvider;
@inject NavigationManager _navigationManager;
<div class="ma-6 d-flex justify-center">
    <MudChip T="string" Color="Color.Primary">
        <h3>กรุณา Login</h3>
    </MudChip>
</div>
<div class="ma-6 d-flex justify-center">
    <MudCard Width="500px">
        <MudForm Model="loginModel" @ref="form" Validation="loginValidator.ValidateValue">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(APIErrorMessages))
                {
                    <MudChip T="string" Class="d-flex justify-center" Color="Color.Error">
                        <p>@APIErrorMessages</p>

                    </MudChip>
                }
                
                <MudTextField @bind-Value="loginModel.LoginName"
                              For="@(() => loginModel.LoginName)"
                              Immediate="true"
                              Label="LoginName" />
                <MudTextField @bind-Value="loginModel.Password"
                              For="@(() => loginModel.Password)"
                              Immediate="true"
                              Label="Password" InputType="InputType.Password" />
               
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync" >Login</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</div>
@* <div class="container my-5 d-flex justify-content-center">
    <div class="alert alert-primary" role="alert">
        <h3>กรุณา Login</h3>
    </div>
</div>

<div class="container my-5 d-flex justify-content-center">
    <div class="card" style="width: 500px;">
        <EditForm Model="loginModel" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card-body">
                @if (!string.IsNullOrEmpty(APIErrorMessages))
                {
                    <div class="alert alert-danger">
                        <p>@APIErrorMessages</p>
                    </div>
                }

                <div class="mb-3">
                    <label for="loginName" class="form-label">Login Name</label>
                    <InputText id="loginName" class="form-control" @bind-Value="loginModel.LoginName" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" @bind-Value="loginModel.Password" Type="password" />
                </div>
            </div>

            <div class="card-footer text-end">
                <Button Variant="Variant.Filled" Color="Color.Primary" Type="submit" class="btn btn-primary">
                    Login
                </Button>
            </div>
        </EditForm>
    </div>
</div> *@

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState {get; set;}
    LoginVm loginModel = new LoginVm();

    LoginValidationVm loginValidator = new LoginValidationVm();

    MudForm form;

    string APIErrorMessages;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/");
        }
        await base.OnInitializedAsync();
    }

    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var httpClient = _httpClientFactory.CreateClient("NHSO5094");
            //var httpClient = _httpClientFactory.CreateClient("HosxpApi"); 
            var response = await _http.PostAsync("api/User/login", requestContent); 
            //var response = await httpClient.PostAsync("api/User/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = $"{APIErrorMessages} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                //_navigationManager.NavigateTo("/registration-confirmation");
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVm>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                await _localStorageService.SetItemAsync("refresh-token", tokenResponse.RefreshToken);
                (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                _navigationManager.NavigateTo("/");
            }
            else
            {
                APIErrorMessages = "Login Failed Plase try after some time";

            }
        }
    }

    @* private async Task LoginAsync()
    {
        //await form.Validate();
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var httpClient = _httpClientFactory.CreateClient("HosxpApi"); 
            //var response = await _http.PostAsync("api/User/login", requestContent); 
            var response = await httpClient.PostAsync("api/User/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = $"{APIErrorMessages} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                //_navigationManager.NavigateTo("/registration-confirmation");
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVm>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                _navigationManager.NavigateTo("/");
            }
            else
            {
                APIErrorMessages = "Login Failed Plase try after some time";

            }
    } *@
}