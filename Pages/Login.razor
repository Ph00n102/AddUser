@page "/login"
@using System.Text.Json;
@using System.Text;
@using System.Net;
@using Blazored.LocalStorage
@using HosxpUi.Layout.Providers
@using HosxpUi.Models
@using HosxpUi.ViewModels.Accounts
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@* @inject IHttpClientFactory _httpClientFactory; *@
@inject HttpClient _http 
@inject ILocalStorageService _localStorageService;
@inject AuthenticationStateProvider _authStateProvider;
@inject NavigationManager _navigationManager;
<div class="ma-6 d-flex justify-center">
    <MudChip T="string" Color="Color.Primary">
        <h3>กรุณา Login</h3>
    </MudChip>
</div>
@if (IsLoggedIn == false && ShowOtpInput == false)
{
<div class="ma-6 d-flex justify-center">
    <MudCard Width="500px">
        <MudForm Model="loginModel" @ref="form" Validation="loginValidator.ValidateValue">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(APIErrorMessages))
                {
                    <MudChip T="string" Class="d-flex justify-center" Color="Color.Error">
                        <p>@APIErrorMessages</p>
                    </MudChip>
                }
                <MudTextField @bind-Value="loginModel.LoginName"
                            For="@(() => loginModel.LoginName)"
                            Immediate="true"
                            Label="LoginName" />
                <MudTextField @bind-Value="loginModel.Password"
                            For="@(() => loginModel.Password)"
                            Immediate="true"
                            Label="Password" InputType="InputType.Password" />
                
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync" >Login</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</div>
}
else if (ShowOtpInput == false && IsLoggedIn == true)
    {
    @* <div class="ma-6 d-flex justify-center">
        <label for="cids" class="form-label">กรอกเลขบัตรประชาชน:</label>
        <input id="cids" class="form-control" @bind="CidInput" />
        <button class="btn btn-primary mt-3" @onclick="SendOtpAsync">Send OTP</button>
    </div>    *@
    @* <div class="ma-6 d-flex justify-center">
    <MudCard Width="350px">
        <MudCardContent>
        <MudItem>
            <MudText Typo="Typo.h6">กรอกเลขบัตรประชาชน:</MudText>
            <MudTextField @bind-Value="CidInput" Label="CID 13 หลัก (ไม่ต้องมีขีดคั่นเลข)" Variant="Variant.Filled" />
        </MudItem>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SendOtpAsync">Send OTP</MudButton>
        </MudCardActions>
    </MudCard>    
    </div> *@
    <div class="ma-6 d-flex justify-center">
        <MudCard Width="350px">
            <MudCardContent>
                <MudItem>
                    <MudTextField @bind-Value="CidInput" Label="CID 13 หลัก (ไม่ต้องมีขีดคั่นเลข)" Variant="Variant.Filled" />
                    <MudButton @onclick="SendOtpAsync">Send OTP</MudButton>

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <MudChip T="string" Class="d-flex justify-center" Color="Color.Error">
                            <p>@Message</p>
                        </MudChip>
                    }
                </MudItem>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SendOtpAsync">Send OTP</MudButton>
            </MudCardActions>
        </MudCard>    
    </div>
    }
else
{
    @* <div class="ma-6 d-flex justify-center">
        <div>
            <label for="otp" class="form-label">กรอกเลข OTP</label>
            <input id="otp" class="form-control" @bind="OtpInput" placeholder="Enter OTP" />
        </div>

        <div>
            <p>Time remaining: @Countdown seconds</p>
        </div>

        <button class="btn btn-primary mt-3" @onclick="SubmitOtpAsync" disabled="@IsSubmitDisabled">Submit OTP</button>
    </div> *@
    <div class="ma-6 d-flex justify-center">
    <MudCard Width="350px">
        <MudCardContent>
        <MudItem>
            <MudText Typo="Typo.h6">กรอกเลข OTP</MudText>
            <MudTextField @bind-Value="OtpInput" Label="Enter OTP" Variant="Variant.Filled" />
            <MudText Typo="Typo.body1">Time remaining: @Countdown seconds</MudText>
        </MudItem>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SubmitOtpAsync" Disabled="@IsSubmitDisabled">
                Submit OTP
            </MudButton>
        </MudCardActions>
    </MudCard>
    </div>
} 


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState {get; set;}
    LoginVm loginModel = new LoginVm();

    LoginValidationVm loginValidator = new LoginValidationVm();

    MudForm form;

    string APIErrorMessages;

    private string CidInput { get; set; } = string.Empty;
    private string OtpInput { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool ShowOtpInput { get; set; } = false;
    private bool IsLoggedIn { get; set; } = false;
    private int Countdown { get; set; } = 60; // Countdown duration in seconds
    private bool IsSubmitDisabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        IsLoggedIn = false;
        ShowOtpInput = false;
        if (user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/");
        }
        await base.OnInitializedAsync();
    }

    @* private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            //var httpClient = _httpClientFactory.CreateClient("HosxpApi"); 
            var response = await _http.PostAsync("api/User/login", requestContent); 
            //var response = await httpClient.PostAsync("api/User/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = $"{APIErrorMessages} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                //_navigationManager.NavigateTo("/registration-confirmation");
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVm>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                //_navigationManager.NavigateTo("/");
            }
            else
            {
                APIErrorMessages = "Login Failed Plase try after some time";

            }
        }
    } *@

    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            
            var response = await _http.PostAsync("api/User/login", requestContent); 

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = $"{APIErrorMessages} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                IsLoggedIn = true;
                ShowOtpInput = false;

                Message = "กรุณากรอกเลขบัตรประชาชนเพื่อรับ OTP";
            }
            else
            {
                APIErrorMessages = "Login Failed. Please try again later.";
            }
        }
    }

    @* private async Task SendOtpAsync()
    {
        if (string.IsNullOrWhiteSpace(CidInput))
        {
            Message = "กรุณากรอกเลขบัตรประชาชน";
            return;
        }

        // Split CIDs by comma and trim whitespace
        var cids = CidInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                           .Select(cid => cid.Trim())
                           .ToArray();

        if (cids.Length == 0)
        {
            Message = "Invalid input. Please provide valid CIDs.";
            return;
        }

        try
        {
            // Call the API
            var response = await _http.PostAsJsonAsync("/api/Moph/SendOtpWithRedis2", cids);

            if (response.IsSuccessStatusCode)
            {
                Message = "กรุณากรอก OTP ที่ได้รับทาง line หมอพร้อม";
                ShowOtpInput = true; // Show OTP input field
                StartCountdown(); // Start the countdown timer
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Error: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    } *@

    private async Task SendOtpAsync()
        {
            var cids = CidInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(cid => cid.Trim())
                                .ToArray();

            if (cids.Length == 0)
            {
                Message = "Invalid input. Please provide valid CIDs.";
                return;
            }

            try
            {
                // First, check if the CID exists in the database
                var cidCheckResponse = await _http.GetAsync($"/api/User/CheckCidExists/{CidInput}");

                Console.WriteLine($"CID being checked: {CidInput}"); // Debug message

                if (cidCheckResponse.IsSuccessStatusCode)
                {
                    var cidExists = await cidCheckResponse.Content.ReadFromJsonAsync<bool>();
                    if (!cidExists)
                    {
                        Message = "The CID does not exist in the system.";  // Set the message
                        StateHasChanged();  // Trigger UI update
                        return;
                    }

                    // Proceed with sending OTP only if the CID exists
                    var response = await _http.PostAsJsonAsync("/api/Moph/SendOtpWithRedis2", cids);

                    if (response.IsSuccessStatusCode)
                    {
                        Message = "กรุณากรอก OTP ที่ได้รับทาง line หมอพร้อม";
                        ShowOtpInput = true; // Show OTP input field
                        StartCountdown(); // Start the countdown timer
                    }
                    else
                    {
                        var error = await response.Content.ReadAsStringAsync();
                        Message = $"Error: {response.StatusCode} - {error}";
                    }
                }
                else
                {
                    Message = "Failed to check CID existence.";
                }
            }
            catch (Exception ex)
            {
                Message = $"An error occurred: {ex.Message}";
            }
        }

    private async void StartCountdown()
    {
        Countdown = 60; // Reset countdown to 60 seconds
        IsSubmitDisabled = false;

        while (Countdown > 0)
        {
            await Task.Delay(1000);
            Countdown--;

            // If countdown reaches zero, reset state
            if (Countdown == 0)
            {
                ResetState();
                Message = "OTP expired. Please request a new OTP.";
            }

            StateHasChanged(); // Notify the UI to re-render
        }
    }

    private void ResetState()
    {
        ShowOtpInput = false;
        CidInput = string.Empty;
        OtpInput = string.Empty;
        IsSubmitDisabled = true;
    }

    @* private async Task SubmitOtpAsync()
    {
        if (string.IsNullOrWhiteSpace(CidInput) || string.IsNullOrWhiteSpace(OtpInput))
        {
            Message = "Please enter both CID and OTP.";
            return;
        }

        try
        {
            // Call the API to get OTP details
            var response = await _http.GetAsync($"/api/Moph/UserOtpInRedis/{CidInput}");

            if (response.IsSuccessStatusCode)
            {
                // Parse the response
                var otpCid = await response.Content.ReadFromJsonAsync<OtpCid>();

                if (otpCid != null && otpCid.Cid == CidInput && otpCid.Otp == OtpInput)
                {
                    Message = "OTP verified successfully!";
                    _navigationManager.NavigateTo("/"); // Navigate to the home page
                    return;
                }
                else
                {
                    Message = "รหัส OTP ไม่ถูกต้อง กรุณากรอกอีกครั้ง";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Message = "No OTP found for the given CID.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Error: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    } *@

    private async Task SubmitOtpAsync()
    {
        if (string.IsNullOrWhiteSpace(CidInput) || string.IsNullOrWhiteSpace(OtpInput))
        {
            Message = "Please enter both CID and OTP.";
            return;
        }

        try
        {
            // Call the API to get OTP details
            var response = await _http.GetAsync($"/api/Moph/UserOtpInRedis/{CidInput}");

            if (response.IsSuccessStatusCode)
            {
                // Parse the response
                var otpCid = await response.Content.ReadFromJsonAsync<OtpCid>();

                if (otpCid != null && otpCid.Cid == CidInput && otpCid.Otp == OtpInput)
                {
                    Message = "OTP verified successfully!";

                    var jsonPayload = JsonSerializer.Serialize(loginModel);
                    var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

                    // Call the backend API to get an access token for the user
                    var authResponse = await _http.PostAsync("api/User/login", requestContent);

                    if (authResponse.IsSuccessStatusCode)
                    {
                        var tokenResponse = await authResponse.Content.ReadFromJsonAsync<JwtTokenResponseVm>();

                        // Save the JWT token in local storage
                        await _localStorageService.SetItemAsync("jwt-access-token", tokenResponse.AccessToken);

                        // Notify authentication state provider to update the user's authentication status
                        (_authStateProvider as CustomAuthProvider).NotifyAuthState();

                        // Redirect the user to the homepage or a protected page
                        _navigationManager.NavigateTo("/");

                        return;
                    }
                    else
                    {
                        Message = "Failed to authorize OTP. Please try again.";
                    }
                }
                else
                {
                    Message = "รหัส OTP ไม่ถูกต้อง กรุณากรอกอีกครั้ง";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Message = "No OTP found for the given CID.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Error: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }
}