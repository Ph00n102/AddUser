@page "/patient"
@page "/patient/{hn}/{an}"
@using HosxpUi.Models
@using HosxpUi.Services
@using Microsoft.AspNetCore.Authorization
@* @inject IHttpClientFactory _httpClientFactory; *@
@inject HttpClient _http 
@inject NavigationManager Navigation;
@inject StateContainer StateContainer
@attribute [Authorize(Roles = "Admin,Pharmacist,Doctor,Card,Nurse")]

<PageTitle>Patient Detail</PageTitle>
<table class="table">
    <tbody>
        @foreach (var item in ptDetails){
        <tr>
            <td>
                <img width="100" height="120" src="data:image/jpeg;base64,@item.image" />
            </td>
            <td>
                <p><strong>ชื่อ</strong> @item.pname@item.fname @item.lname</p>
                <p><strong>HN</strong> @item.hn</p>
                <p><strong>AN</strong> @item.an</p>
                <p><strong>สิทธิการรักษา</strong> @item.name</p>
            </td>
            <td>
                <button class="btn btn-warning"><a href="http://172.16.1.104/Emr2398_link/index.jsp?queryhn=@item.hn&user=50239&no_ax=true" target="blank">ดูประวัติ binary</a></button>
                <button class="btn btn-warning"><a href="/opdvisit/@item.hn" target="_blank">Visit note</a></button>
                <button class="btn btn-success"> <a href="http://localhost:9090/?QueryMode=PID&Value=@item.hn" target="_blank">ดู x-ray</a></button>
                <button class="btn btn-info"><a href="/labchem/@item.hn" target="_blank">ผล lab chem</a></button>
                <button class="btn btn-info"><a href="/labhem/@item.hn" target="_blank">ผล lab hemato</a></button>
                <button class="btn btn-info"><a href="/labua/@item.hn" target="_blank">ผล lab UA</a></button>
                <button class="btn btn-info"><a href="/labim/@item.hn" target="_blank">ผล lab immune</a></button>
                <button class="btn btn-info"><a href="/olab/@item.hn" target="_blank">ผล outlab</a></button>
                <button class="btn btn-info"><a href="/othlab/@item.hn" target="_blank">ผล lab อืนๆ</a></button>
                <button class="btn btn-primary"><a href="/ptnote/@item.hn" target="_blank">Note Photo</a></button>
                @if (StateContainer.Role == "Admin" || StateContainer.Role == "Doctor")
                {
                    <button class="btn btn-danger" @onclick="ToggleOrderInput">สั่ง order</button>
                }
            </td>
        </tr>
        }
    </tbody>
</table>
<table class="table">
    <thead>
        <tr>
            <td>Order Date</td>
            <td>Order Oneday</td>
            <td>Order Continuous</td>
            <td>Progress Note</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                @currentDate <br/>
                <button class="btn btn-danger" @onclick="ToggleOrderInput">สั่ง order</button>
            </td>
            <td>
                @if (showOrderInput)
                {
                    <div class="mt-2">
                        @foreach (var order in newOrders.Select((value, index) => new { value, index }))
                        {
                            @* <div class="d-flex align-items-center mb-2">
                                <input @bind="searchTerm" @oninput="OnInput" placeholder="Search..." style="background-color: gray; color: white; height:35px ;"/>
                                    <ul>
                                        @foreach (var item in items)
                                        {
                                            <li @onclick="() => SelectItem(item)">@item.sksDfsText</li>
                                        }
                                    </ul>
                                <input type="text" class="form-control me-2" @bind="@newOrders[order.index]" placeholder="Enter order oneday" />
                                <button class="btn btn-danger" @onclick="() => RemoveOrderInput(order.index)">-</button>
                            </div> *@
                            <div class="dropdown">
                                <input @bind="searchTerm" @oninput="OnInput" placeholder="Search..." class="form-control" />
                                @if (items.Any())
                                {
                                    <ul class="dropdown-menu show">
                                        @foreach (var item in items)
                                        {
                                            <li class="dropdown-item" @onclick="() => SelectItem(item)">@item.sksDfsText</li>
                                        }
                                    </ul>
                                }
                                <input type="text" class="form-control me-2" @bind="@newOrders[order.index]" placeholder="Enter order oneday" />
                                <button class="btn btn-danger" @onclick="() => RemoveOrderInput(order.index)">-</button>
                            </div>
                        }
                        <button class="btn btn-success" @onclick="AddOrderInput">+</button>
                    </div>
                }
            </td>
            <td>
                @if (showOrderInput)
                {
                    <div class="mt-2">
                        @foreach (var order in newContinueOrders.Select((value, index) => new { value, index }))
                        {
                            <div class="d-flex align-items-center mb-2">
                                <input type="text" class="form-control me-2" @bind="@newContinueOrders[order.index]" placeholder="Enter order continue" />
                                <button class="btn btn-danger" @onclick="() => RemoveOrderInputContinue(order.index)">-</button>
                            </div>
                        }
                        <button class="btn btn-success" @onclick="AddOrderInputContinue">+</button>
                    </div>
                }
                @foreach (var order in orderContinueReview)
                {
                    <p>- @order.drugName @order.orderItemDetail</p>
                }
            </td>
            <td>
            </td>
        </tr>
        @foreach (var item in orderDetails)
        {
            <tr>
            <td>
                    @if (item.orderDate != null && item.orderDate.Any())
                    {
                        <p>@item.orderDate</p>
                    }
                    else
                    {
                        <p>No Order Dates</p>
                    }
                </td>
            <td>
                    @if (item.oneday != null && item.oneday.Any())
                    {
                        @foreach (var drug in item.oneday)
                        {
                            <p>
                               - @drug.drugName @drug.orderItemDetail @(drug.offOrderItemId != null ? $"off {drug.offOrderDrugName} {drug.offOrderItemDetail}" : "")
                            </p>
                            <p><strong>@drug.doctorRole @drug.doctorName </strong></p>
                            <p><strong>วันที่ @drug.orderDate เวลา @drug.orderTime </strong></p>
                        }
                    }
                    else
                    {
                        <p>No Oneday Orders</p>
                    }
                </td>
                <td>
                    @if (item.continuous != null && item.continuous.Any())
                    {
                        @foreach (var drug in item.continuous)
                        {
                            <p>
                                - @drug.drugName @drug.orderItemDetail @(drug.offOrderItemId != null ? $"off {drug.offOrderDrugName} {drug.offOrderItemDetail}" : "")
                            </p>
                            <p><strong>@drug.doctorRole @drug.doctorName </strong></p>
                            <p><strong>วันที่ @drug.orderDate เวลา @drug.orderTime </strong></p>
                        }
                    }
                    else
                    {
                        <p>No Continuous Orders</p>
                    }
                </td>  
                <td>
                    @foreach (var item2 in progressNoteDetails)
                    {
                        @if (item2.progressNoteDate == item.orderDate)
                        {
                            @foreach (var progress in item2.createUser) 
                            {
                                @foreach (var detail in progress.progressNoteList)
                                {
                                    <p>@detail.progressNoteItemType</p>
                                    <p>@detail.progressNoteItemDetail</p>
                                    <p>@detail.progressNoteItemDetail2</p>
                                    <p><strong>วันที่ @detail.progressNoteDate เวลา @detail.progressNoteTime น.</strong></p>
                                }
                                @* <p><strong>@GetNameFromLoginName(@progress.createUser)</strong></p> *@
                                <p><strong>@(userNames.ContainsKey(progress.createUser) ? userNames[progress.createUser] : "")</strong></p>
                            }
                        }
                    }
                </td>
            </tr> 
        }
    </tbody>
</table> 

@code {
    private string currentDate = DateOnly.FromDateTime(DateTime.Now).ToString("yyyy-MM-dd");
    [Parameter]
    public string hn {get; set;}
    [Parameter]
    public string an {get; set;}
    public string orderItemId {get; set;}

    public List<WardPatient> ptDetails = new();
    public List<OpdVisit> visitList = new();
    public List<OrderDetail> orderDetails = new();
    public List<ContinuosReview> orderContinueReview = new();
    public List<ProgressNote> progressNoteDetails = new();

    private bool showOrderInput = false;
    private bool showOrderContinueInput = false;
    private List<string> newOrders = new();
    private List<string> newContinueOrders = new();
    private Dictionary<string, string> userNames = new();

    private string searchTerm;
    private List<DrugNameHosxp> items = new();

    @* protected override async Task OnInitializedAsync()
    {
        ptDetails = await _http.GetFromJsonAsync<List<WardPatient>>($"api/Ipd/getpatientbyhn?_hn={hn}");
        orderContinueReview = await _http.GetFromJsonAsync<List<ContinuosReview>>($"api/Drug/GetContinuousDrugOrders?_An={an}");
        orderDetails = await _http.GetFromJsonAsync<List<OrderDetail>>($"api/Drug/GetDrugIpdAll?_An={an}");
        progressNoteDetails = await _http.GetFromJsonAsync<List<ProgressNote>>($"api/ProgressNote/GetProgressNoteIpdAll?_An={an}");

        // Pre-fetch all unique user names
        var uniqueUsers = progressNoteDetails
            .SelectMany(p => p.createUser)
            .Select(u => u.createUser)
            .Distinct();

        foreach (var user in uniqueUsers)
        {
            if (!string.IsNullOrEmpty(user) && !userNames.ContainsKey(user))
            {
                userNames[user] = await GetNameFromLoginName(user);
            }
        }
    }  *@

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ptDetails = await _http.GetFromJsonAsync<List<WardPatient>>($"api/Ipd/getpatientbyhn?_hn={hn}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching patient details: {ex.Message}");
            await ShowAlert("มีความผิดพลาด กรุณาแจ้งสำนักงานดิจิทัลทางการแพทย์ 55319,8926");
        }

        try
        {
            orderContinueReview = await _http.GetFromJsonAsync<List<ContinuosReview>>($"api/Drug/GetContinuousDrugOrders?_An={an}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching continuous orders: {ex.Message}");
            await ShowAlert("มีความผิดพลาด กรุณาแจ้งสำนักงานดิจิทัลทางการแพทย์ 55319,8926");
        }

        try
        {
            orderDetails = await _http.GetFromJsonAsync<List<OrderDetail>>($"api/Drug/GetDrugIpdAll?_An={an}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching drug orders: {ex.Message}");
            await ShowAlert("มีความผิดพลาด กรุณาแจ้งสำนักงานดิจิทัลทางการแพทย์");
        }

        try
        {
            progressNoteDetails = await _http.GetFromJsonAsync<List<ProgressNote>>($"api/ProgressNote/GetProgressNoteIpdAll?_An={an}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching progress notes: {ex.Message}");
            await ShowAlert("มีความผิดพลาด กรุณาแจ้งสำนักงานดิจิทัลทางการแพทย์ 55319,8926");
        }

        // Pre-fetch all unique user names
        var uniqueUsers = progressNoteDetails
            .SelectMany(p => p.createUser)
            .Select(u => u.createUser)
            .Distinct();

        foreach (var user in uniqueUsers)
        {
            if (!string.IsNullOrEmpty(user) && !userNames.ContainsKey(user))
            {
                userNames[user] = await GetNameFromLoginName(user);
            }
        }
    }

private async Task ShowAlert(string message)
{
    await Task.Run(() => 
        Navigation.NavigateTo($"javascript:alert('{message}');", true)
    );
}


    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

     private void ToggleOrderInput()
    {
        showOrderInput = !showOrderInput;
        showOrderContinueInput = !showOrderContinueInput;
    }

    private void AddOrderInput()
    {
        newOrders.Add("");
    }

    private void AddOrderInputContinue()
    {
        newContinueOrders.Add("");
    }

    private void RemoveOrderInput(int index)
    {
        if (index >= 0 && index < newOrders.Count)
        {
            newOrders.RemoveAt(index);
        }
    }

    private void RemoveOrderInputContinue(int index)
    {
        if (index >= 0 && index < newContinueOrders.Count)
        {
            newContinueOrders.RemoveAt(index);
        }
    }

    private void UpdateOrder(int index, ChangeEventArgs e)
    {
        newOrders[index] = e.Value.ToString();
    }

     private void UpdateOrderContinue(int index, ChangeEventArgs e)
    {
        newContinueOrders[index] = e.Value.ToString();
    }

    @* private async Task<string> GetNameFromLoginName(string createUser)
    {
        try
        {
            // Fetching a string response instead of deserializing into ProgressNote
            var response = await _http.GetStringAsync($"api/ProgressNote/GetNameFromLoginName?createUser={createUser}");
            return response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching name for createUser: {createUser} - {ex.Message}");
        }
        return "Error";
    } *@
    private async Task<string> GetNameFromLoginName(string createUser)
    {
        if (string.IsNullOrEmpty(createUser))
        {
            return "Unknown";
        }

        try
        {
            return await _http.GetStringAsync($"api/ProgressNote/GetNameFromLoginName?createUser={createUser}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching name for createUser: {createUser} - {ex.Message}");
            return "Error";
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString();
        items = await GetItemsAsync(searchTerm);
    }

    private async Task<List<DrugNameHosxp>> GetItemsAsync(string query)
    {
        try
        {
            var response = await _http.GetAsync($"/api/Drug/GetDrugNameFromDrugItem?name={query}");

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<DrugNameHosxp>>();
                return data ?? new List<DrugNameHosxp>(); // Return empty list if null
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                Console.WriteLine("No data found or invalid request.");
                return new List<DrugNameHosxp>(); // Return empty list to avoid UI crash
            }
            else
            {
                Console.WriteLine($"Unexpected error: {response.StatusCode}");
                return new List<DrugNameHosxp>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            return new List<DrugNameHosxp>(); // Return empty list on exception
        }
    }

    private void SelectItem(DrugNameHosxp item)
    {
        searchTerm = item.sksDfsText;
        items.Clear();
    }

    

}